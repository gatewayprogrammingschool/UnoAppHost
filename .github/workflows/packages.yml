name: Packages

on:
  release:
    types: [released]
  push:
    branches: [ master, main, release/* ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  prepare:
    runs-on: windows-2022
    env:
      ARTIFACT_FOLDER: "${{ github.workspace }}/nuget"
    outputs:
      VERSION: "${{ steps.version.VERSION }}"
    steps:
    - name: Event
      env:       
        event_name: ${{ github.event_name }}
      run: echo "event_name $env:event_name"
    - name: Checkout
      uses: actions/checkout@v1
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@master
      with:
        vs-prerelease: true
        vs-version: 17
        
    - name: Setup GitVersion
      run: |
        dotnet tool install gitversion.tool -g
        dotnet-gitversion
    - name: Restore dependencies
      run: msbuild /t:restore
      
    - name: Build Debug
      run: msbuild /t:build /p:Configuration=Debug /p:PackageOutputPath="${{ env.ARTIFACT_FOLDER }}" /p:IncludeSource=true src/CommunityToolkit.Extensions.Hosting.WindowsAppSdk/CommunityToolkit.Extensions.Hosting.WindowsAppSdk.csproj
  
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        name: artifacts
        path: ${{ env.ARTIFACT_FOLDER }}

  publish-to-github:
    runs-on: windows-2022
    if: ${{ github.event_name != 'release' }}
    needs: prepare
    env:
      ARTIFACT_FOLDER: "${{ github.workspace }}/nuget"
      VERSION: "${{ needs.prepare.output.VERSION }}"
    steps:
    - name: Setup GitVersion
      run: |
        dotnet tool install gitversion.tool -g
        dotnet-gitversion
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        name: artifacts
        path: ${{ env.ARTIFACT_FOLDER }}
    - run: dir ${{ env.ARTIFACT_FOLDER }} -recurse
    - name: Nuget Publish
      env:
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Deploying [SharpNinja.Extensions.WindowsAppSdkHost.${env:NuGetVersionV2}.symbols.nupkg] from [$env:ARTIFACT_FOLDER]"
        $githubUrl="https://nuget.pkg.github.com/OWNER/index.json"
        & dotnet nuget add source --username sharpninja --password $env:TOKEN --store-password-in-clear-text --name github $githubUrl
        $nupkgs = GCI SharpNinja.Extensions.WindowsAppSdkHost.${env:VERSION}.symbols.nupkg -Path $env:ARTIFACT_FOLDER -ErrorAction Stop -Verbose
        $nupkgs | foreach-object -Verbose -process { `
          & dotnet nuget push "$_" -k "$env:TOKEN" --source github --skip-duplicate
        }
    # - name: GitHub Packages
    #   uses: tanaka-takayoshi/nuget-publish-to-github-packages-action@v2.1
    #   with:
    #     # Path of NuPkg
    #     nupkg-path: '${{ env.ARTIFACT_FOLDER }}/SharpNinja.Extensions.WindowsAppSdkHost.${{ env.NuGetVersionV2 }}.symbols.nupkg'
    #     # package repository owner
    #     repo-owner: sharpninja
    #     # user account
    #     gh-user: sharpninja
    #     # access token
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     # skip publishing duplicated package(s)
    #     skip-duplicate: true

  publish-to-nuget:
    runs-on: windows-2022
    if: ${{ github.event_name == 'release' }}
    needs: prepare
    env:
      ARTIFACT_FOLDER: "${{ github.workspace }}/nuget"
      VERSION: "${{ needs.prepare.output.VERSION }}"
    steps:
    - name: Download a Build Artifact
      uses: actions/download-artifact@v3.0.0
      with:
        name: artifacts
    - name: Event
      env:       
        event_name: ${{ github.event_name }}
      run: echo "event_name $env:event_name"

    - name: Attach nuget packages to Github releases
      uses: softprops/action-gh-release@v1
      with:
        files: "${{ env.ARTIFACT_FOLDER }}/*.symbols.nupkg"

    - name: Nuget Publish
      env:
        nuget_token: ${{ secrets.NUGET_TOKEN }}
      run: |
        $nupkgs = GCI *.symbols.nupkg -Path $env:ARTIFACT_FOLDER -ErrorAction Stop -Verbose
        $nupkgs | foreach-object -Verbose -process { `
          & dotnet nuget push "$_" -k "$env:NUGET_TOKEN" --source "https://api.nuget.org/v3/index.json" --skip-duplicate
        }
